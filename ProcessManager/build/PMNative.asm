; Listing generated by Microsoft (R) Optimizing Compiler Version 18.00.31101.0 

	TITLE	C:\work\Product Specialist\eclipse-ws\ProcessManager\src\pmserver\PMNative.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_tracestr:BYTE:0200H
COMM	_pm_logname:BYTE:0200H
COMM	_progname:DWORD
_DATA	ENDS
_BSS	SEGMENT
$SG80234 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG79969 DB	'Invalid PID %d', 0aH, 00H
$SG79970 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG79971 DB	'%s:%d %s', 00H
	ORG $+3
$SG79972 DB	'%s', 00H
	ORG $+1
$SG79975 DB	'PID %d - OpenProcess returned %d', 0aH, 00H
	ORG $+2
$SG79976 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG79977 DB	'%s:%d %s', 00H
	ORG $+3
$SG79978 DB	'%s', 00H
	ORG $+1
$SG79988 DB	'PID %d EXE File = %s', 0aH, 00H
	ORG $+2
$SG79991 DB	'csrss', 00H
	ORG $+2
$SG79992 DB	'Skip CSRSS', 00H
	ORG $+1
$SG79993 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG79994 DB	'%s:%d %s', 00H
	ORG $+3
$SG79996 DB	'Recurse PID %d', 0aH, 00H
$SG79997 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG79998 DB	'%s:%d %s', 00H
	ORG $+3
$SG80001 DB	'PID %d - OpenProcess returned %d', 0aH, 00H
	ORG $+2
$SG80002 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80003 DB	'%s:%d %s', 00H
	ORG $+3
$SG80004 DB	'%s', 00H
	ORG $+1
$SG80005 DB	'Terminating PID %d', 0aH, 00H
$SG80006 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80007 DB	'%s:%d %s', 00H
	ORG $+3
$SG80009 DB	'TerminateProcess(%x, %d) returned %d', 0aH, 00H
	ORG $+2
$SG80010 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80011 DB	'%s:%d %s', 00H
	ORG $+3
$SG80012 DB	'%s', 00H
	ORG $+1
$SG80034 DB	';\0;;', 00H
	ORG $+2
$SG80079 DB	' "', 00H
	ORG $+1
$SG80080 DB	'"', 00H
	ORG $+2
$SG80082 DB	' ', 00H
	ORG $+2
$SG80115 DB	'"', 00H
	ORG $+2
$SG80116 DB	'"', 00H
	ORG $+2
$SG80121 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80122 DB	'%s:%d %s', 00H
	ORG $+3
$SG80124 DB	';\0;;', 00H
	ORG $+2
$SG80125 DB	'%s: No working directory!', 0aH, 00H
	ORG $+1
$SG80132 DB	'FAIL', 00H
	ORG $+3
$SG80136 DB	';\%d;;', 00H
	ORG $+1
$SG80137 DB	'EXEC', 00H
	ORG $+3
$SG80138 DB	'DEAD', 00H
	ORG $+3
$SG80174 DB	'command %s: %s', 0aH, 00H
$SG80182 DB	'--', 00H
	ORG $+1
$SG80185 DB	0aH, 00H
	ORG $+2
$SG80190 DB	'PM_WORKDIR', 00H
	ORG $+1
$SG80193 DB	'TEMP', 00H
	ORG $+3
$SG80196 DB	'TMP', 00H
$SG80199 DB	'\TEMP', 00H
	ORG $+2
$SG80200 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80201 DB	'%s:%d %s', 00H
	ORG $+3
$SG80209 DB	'%Y-%m-%d:%H-%M-%S', 00H
	ORG $+2
$SG80220 DB	';%s;\%s;;', 0aH, 00H
	ORG $+1
$SG80223 DB	'error opening history file', 0aH, 00H
$SG80224 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80225 DB	'%s:%d %s', 00H
	ORG $+3
$SG80247 DB	'\PMNative.log', 00H
	ORG $+2
$SG80248 DB	'Start', 0aH, 00H
	ORG $+1
$SG80249 DB	'..\src\pmserver\PMNative.c', 00H
	ORG $+1
$SG80250 DB	'%s:%d %s', 00H
	ORG $+3
$SG80267 DB	'\history.dat', 00H
	ORG $+3
$SG80268 DB	'\stdout.dat', 00H
$SG80271 DB	'\stderr.dat', 00H
$SG80273 DB	'exec', 00H
	ORG $+3
$SG80280 DB	'\environ.dat', 00H
	ORG $+3
$SG80281 DB	'w', 00H
	ORG $+2
$SG80286 DB	'%s', 0aH, 00H
$SG80290 DB	'KILL', 00H
	ORG $+3
$SG80294 DB	'INTERNAL ERROR: invalid kill command line', 0aH, 00H
	ORG $+1
$SG80295 DB	'KILL', 00H
	ORG $+3
$SG80298 DB	'suspend', 00H
$SG80302 DB	'INTERNAL ERROR: invalid suspend command line', 0aH, 00H
	ORG $+2
$SG80303 DB	'SUSPEND', 00H
$SG80306 DB	'resume', 00H
	ORG $+1
$SG80310 DB	'INTERNAL ERROR: invalid resume command line', 0aH, 00H
	ORG $+3
$SG80311 DB	'RESUME', 00H
_DATA	ENDS
PUBLIC	_signalProcess
PUBLIC	_winStartProcess
PUBLIC	_PauseResumeThreadList
PUBLIC	_printError
PUBLIC	_format_timeofday
PUBLIC	_addHistory
PUBLIC	_setWorkDir
PUBLIC	_writelog
PUBLIC	_tstr2str
PUBLIC	_TerminateProcessTree
PUBLIC	_KillProcess
PUBLIC	_errExit
PUBLIC	_str2tstr
PUBLIC	_openFileHandle
PUBLIC	_quoteSpaces
PUBLIC	_main
EXTRN	___report_rangecheckfailure:PROC
EXTRN	___iob_func:PROC
EXTRN	_fclose:PROC
EXTRN	_fflush:PROC
EXTRN	_fopen:PROC
EXTRN	_fprintf:PROC
EXTRN	_perror:PROC
EXTRN	_printf:PROC
EXTRN	_setvbuf:PROC
EXTRN	_sprintf:PROC
EXTRN	__errno:PROC
EXTRN	_exit:PROC
EXTRN	_getenv:PROC
EXTRN	_mbstowcs:PROC
EXTRN	_strtol:PROC
EXTRN	_wcstombs:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_memset:PROC
EXTRN	_strcpy:PROC
EXTRN	_strcat:PROC
EXTRN	_strlen:PROC
EXTRN	__stricmp:PROC
EXTRN	_strstr:PROC
EXTRN	_strftime:PROC
EXTRN	__localtime64:PROC
EXTRN	__time64:PROC
EXTRN	__close:PROC
EXTRN	__write:PROC
EXTRN	__open:PROC
EXTRN	__get_osfhandle:PROC
EXTRN	_isspace:PROC
EXTRN	_tolower:PROC
EXTRN	__imp__GetStdHandle@4:PROC
EXTRN	__imp__CloseHandle@4:PROC
EXTRN	__imp__SetHandleInformation@12:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__WaitForSingleObject@8:PROC
EXTRN	__imp__Sleep@4:PROC
EXTRN	__imp__TerminateProcess@8:PROC
EXTRN	__imp__OpenThread@12:PROC
EXTRN	__imp__SuspendThread@4:PROC
EXTRN	__imp__ResumeThread@4:PROC
EXTRN	__imp__CreateProcessW@40:PROC
EXTRN	__imp__OpenProcess@12:PROC
EXTRN	__imp__GetWindowsDirectoryA@8:PROC
EXTRN	__imp__LocalFree@4:PROC
EXTRN	__imp__FormatMessageW@28:PROC
EXTRN	__getcwd:PROC
EXTRN	__chdir:PROC
EXTRN	_CreateToolhelp32Snapshot@8:PROC
EXTRN	_Process32FirstW@8:PROC
EXTRN	_Process32NextW@8:PROC
EXTRN	_Thread32First@8:PROC
EXTRN	_Thread32Next@8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	_memset:PROC
EXTRN	__environ:DWORD
EXTRN	___security_cookie:DWORD
_BSS	SEGMENT
	ALIGN	4

?outstr@?1??TerminateProcessTree@@9@9 DB 084H DUP (?)	; `TerminateProcessTree'::`2'::outstr
?output@?1??quoteSpaces@@9@9 DB 0200H DUP (?)		; `quoteSpaces'::`2'::output
?time_string@?1??format_timeofday@@9@9 DB 028H DUP (?)	; `format_timeofday'::`2'::time_string
_BSS	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv134 = -64						; size = 4
_procId$1 = -60						; size = 4
_procId$2 = -56						; size = 4
_procId$3 = -52						; size = 4
_fenv$4 = -48						; size = 4
_envp$5 = -44						; size = 4
_execArgs$6 = -40					; size = 4
_execFile$7 = -36					; size = 4
_envName$8 = -32					; size = 4
_mix$ = -28						; size = 4
_parentDir$ = -24					; size = 4
_historyName$ = -20					; size = 4
_errName$ = -16						; size = 4
_outName$ = -12						; size = 4
_cmd$ = -8						; size = 4
_execRet$ = -4						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_main	PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 663
	push	ebp
	mov	ebp, esp
	sub	esp, 64					; 00000040H
	push	edi
	lea	edi, DWORD PTR [ebp-64]
	mov	ecx, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 665
	mov	DWORD PTR _cmd$[ebp], OFFSET $SG80234
; Line 666
	mov	DWORD PTR _outName$[ebp], 0
; Line 667
	mov	DWORD PTR _errName$[ebp], 0
; Line 668
	mov	DWORD PTR _historyName$[ebp], 0
; Line 669
	mov	DWORD PTR _parentDir$[ebp], 0
; Line 670
	mov	DWORD PTR _mix$[ebp], 0
; Line 673
	push	0
	push	4
	push	0
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	push	eax
	call	_setvbuf
	add	esp, 16					; 00000010H
; Line 674
	push	0
	push	4
	push	0
	call	___iob_func
	mov	edx, 32					; 00000020H
	shl	edx, 1
	add	eax, edx
	push	eax
	call	_setvbuf
	add	esp, 16					; 00000010H
; Line 678
	push	512					; 00000200H
	push	OFFSET _pm_logname
	call	__getcwd
	add	esp, 8
; Line 679
	push	OFFSET $SG80247
	push	OFFSET _pm_logname
	call	_strcat
	add	esp, 8
; Line 681
	push	OFFSET $SG80248
	push	681					; 000002a9H
	push	OFFSET $SG80249
	push	OFFSET $SG80250
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 683
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _progname, ecx
	mov	edx, DWORD PTR _argv$[ebp]
	add	edx, 4
	mov	DWORD PTR _argv$[ebp], edx
	mov	eax, DWORD PTR _argc$[ebp]
	sub	eax, 1
	mov	DWORD PTR _argc$[ebp], eax
; Line 684
	cmp	DWORD PTR _argc$[ebp], 0
	jle	SHORT $LN29@main
; Line 685
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _cmd$[ebp], edx
	mov	eax, DWORD PTR _argv$[ebp]
	add	eax, 4
	mov	DWORD PTR _argv$[ebp], eax
	mov	ecx, DWORD PTR _argc$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _argc$[ebp], ecx
; Line 686
	jmp	SHORT $LN27@main
$LN29@main:
; Line 688
	push	22					; 00000016H
	call	_exit
$LN27@main:
; Line 691
	mov	edx, 1
	imul	eax, edx, 0
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	movsx	eax, BYTE PTR [edx+eax]
	cmp	eax, 45					; 0000002dH
	jne	$LN26@main
	cmp	DWORD PTR _argc$[ebp], 0
	jle	$LN26@main
; Line 692
	mov	ecx, 1
	shl	ecx, 0
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx]
	movsx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR tv134[ebp], ecx
	mov	edx, DWORD PTR tv134[ebp]
	sub	edx, 69					; 00000045H
	mov	DWORD PTR tv134[ebp], edx
	cmp	DWORD PTR tv134[ebp], 31		; 0000001fH
	ja	$LN24@main
	mov	eax, DWORD PTR tv134[ebp]
	movzx	ecx, BYTE PTR $LN32@main[eax]
	jmp	DWORD PTR $LN33@main[ecx*4]
$LN23@main:
; Line 694
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _outName$[ebp], ecx
; Line 695
	mov	edx, DWORD PTR _argv$[ebp]
	add	edx, 4
	mov	DWORD PTR _argv$[ebp], edx
	mov	eax, DWORD PTR _argc$[ebp]
	sub	eax, 1
	mov	DWORD PTR _argc$[ebp], eax
; Line 696
	jmp	SHORT $LN24@main
$LN22@main:
; Line 698
	mov	ecx, 4
	shl	ecx, 0
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx+ecx]
	mov	DWORD PTR _errName$[ebp], eax
; Line 699
	mov	ecx, DWORD PTR _argv$[ebp]
	add	ecx, 4
	mov	DWORD PTR _argv$[ebp], ecx
	mov	edx, DWORD PTR _argc$[ebp]
	sub	edx, 1
	mov	DWORD PTR _argc$[ebp], edx
; Line 700
	jmp	SHORT $LN24@main
$LN21@main:
; Line 702
	mov	eax, 4
	shl	eax, 0
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _historyName$[ebp], edx
; Line 703
	mov	eax, DWORD PTR _argv$[ebp]
	add	eax, 4
	mov	DWORD PTR _argv$[ebp], eax
	mov	ecx, DWORD PTR _argc$[ebp]
	add	ecx, 1
	mov	DWORD PTR _argc$[ebp], ecx
; Line 704
	jmp	SHORT $LN24@main
$LN20@main:
; Line 706
	mov	edx, 4
	shl	edx, 0
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax+edx]
	mov	DWORD PTR _parentDir$[ebp], ecx
; Line 707
	mov	edx, DWORD PTR _argv$[ebp]
	add	edx, 4
	mov	DWORD PTR _argv$[ebp], edx
	mov	eax, DWORD PTR _argc$[ebp]
	sub	eax, 1
	mov	DWORD PTR _argc$[ebp], eax
; Line 708
	jmp	SHORT $LN24@main
$LN19@main:
; Line 710
	mov	DWORD PTR _mix$[ebp], 1
$LN24@main:
; Line 715
	mov	ecx, DWORD PTR _argv$[ebp]
	add	ecx, 4
	mov	DWORD PTR _argv$[ebp], ecx
	mov	edx, DWORD PTR _argc$[ebp]
	sub	edx, 1
	mov	DWORD PTR _argc$[ebp], edx
; Line 716
	jmp	$LN27@main
$LN26@main:
; Line 718
	cmp	DWORD PTR _parentDir$[ebp], 0
	je	$LN17@main
; Line 719
	push	512					; 00000200H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _historyName$[ebp], eax
; Line 720
	mov	eax, DWORD PTR _parentDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _historyName$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 721
	push	OFFSET $SG80267
	mov	edx, DWORD PTR _historyName$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 722
	push	512					; 00000200H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _outName$[ebp], eax
; Line 723
	mov	eax, DWORD PTR _parentDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outName$[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 724
	push	OFFSET $SG80268
	mov	edx, DWORD PTR _outName$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 726
	cmp	DWORD PTR _mix$[ebp], 0
	je	SHORT $LN16@main
; Line 727
	mov	eax, DWORD PTR _outName$[ebp]
	mov	DWORD PTR _errName$[ebp], eax
; Line 728
	jmp	SHORT $LN17@main
$LN16@main:
; Line 729
	push	512					; 00000200H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _errName$[ebp], eax
; Line 730
	mov	ecx, DWORD PTR _parentDir$[ebp]
	push	ecx
	mov	edx, DWORD PTR _errName$[ebp]
	push	edx
	call	_strcpy
	add	esp, 8
; Line 731
	push	OFFSET $SG80271
	mov	eax, DWORD PTR _errName$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
$LN17@main:
; Line 735
	push	OFFSET $SG80273
	mov	ecx, DWORD PTR _cmd$[ebp]
	push	ecx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	$LN14@main
; Line 737
	push	512					; 00000200H
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _envName$8[ebp], eax
; Line 740
	cmp	DWORD PTR _parentDir$[ebp], 0
	je	SHORT $LN13@main
; Line 741
	mov	edx, DWORD PTR __environ
	mov	DWORD PTR _envp$5[ebp], edx
; Line 743
	mov	eax, DWORD PTR _parentDir$[ebp]
	push	eax
	mov	ecx, DWORD PTR _envName$8[ebp]
	push	ecx
	call	_strcpy
	add	esp, 8
; Line 744
	push	OFFSET $SG80280
	mov	edx, DWORD PTR _envName$8[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 745
	push	OFFSET $SG80281
	mov	eax, DWORD PTR _envName$8[ebp]
	push	eax
	call	_fopen
	add	esp, 8
	mov	DWORD PTR _fenv$4[ebp], eax
; Line 746
	cmp	DWORD PTR _fenv$4[ebp], 0
	je	SHORT $LN13@main
$LN11@main:
; Line 747
	mov	ecx, DWORD PTR _envp$5[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN10@main
; Line 748
	mov	edx, DWORD PTR _envp$5[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	push	OFFSET $SG80286
	mov	ecx, DWORD PTR _fenv$4[ebp]
	push	ecx
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 749
	mov	edx, DWORD PTR _envp$5[ebp]
	add	edx, 4
	mov	DWORD PTR _envp$5[ebp], edx
; Line 750
	jmp	SHORT $LN11@main
$LN10@main:
; Line 751
	mov	eax, DWORD PTR _fenv$4[ebp]
	push	eax
	call	_fclose
	add	esp, 4
$LN13@main:
; Line 757
	mov	ecx, DWORD PTR _argc$[ebp]
	mov	edx, DWORD PTR _argv$[ebp]
	mov	DWORD PTR [edx+ecx*4], 0
; Line 758
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _execFile$7[ebp], ecx
; Line 759
	mov	edx, DWORD PTR _argv$[ebp]
	mov	DWORD PTR _execArgs$6[ebp], edx
; Line 761
	mov	eax, DWORD PTR _historyName$[ebp]
	push	eax
	mov	ecx, DWORD PTR _errName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outName$[ebp]
	push	edx
	mov	eax, DWORD PTR _execArgs$6[ebp]
	push	eax
	mov	ecx, DWORD PTR _execFile$7[ebp]
	push	ecx
	call	_winStartProcess
	add	esp, 20					; 00000014H
	mov	DWORD PTR _execRet$[ebp], eax
; Line 762
	mov	eax, DWORD PTR _execRet$[ebp]
	jmp	$LN31@main
; Line 763
	jmp	$LN9@main
$LN14@main:
; Line 764
	push	OFFSET $SG80290
	mov	edx, DWORD PTR _cmd$[ebp]
	push	edx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN8@main
; Line 766
	push	0
	push	0
	mov	eax, DWORD PTR _argv$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_strtol
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _procId$3[ebp], eax
; Line 767
	mov	edx, DWORD PTR _argv$[ebp]
	add	edx, 4
	mov	DWORD PTR _argv$[ebp], edx
	mov	eax, DWORD PTR _argc$[ebp]
	sub	eax, 1
	mov	DWORD PTR _argc$[ebp], eax
; Line 768
	jns	SHORT $LN7@main
; Line 769
	push	OFFSET $SG80294
	call	_printf
	add	esp, 4
; Line 770
	mov	eax, 22					; 00000016H
	jmp	$LN31@main
$LN7@main:
; Line 772
	mov	ecx, DWORD PTR _historyName$[ebp]
	push	ecx
	push	OFFSET $SG80295
	call	_addHistory
	add	esp, 8
; Line 773
	push	0
	mov	edx, DWORD PTR _procId$3[ebp]
	push	edx
	call	_signalProcess
	add	esp, 8
	jmp	$LN9@main
$LN8@main:
; Line 774
	push	OFFSET $SG80298
	mov	eax, DWORD PTR _cmd$[ebp]
	push	eax
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN5@main
; Line 775
	push	0
	push	0
	mov	ecx, DWORD PTR _argv$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_strtol
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _procId$2[ebp], eax
; Line 776
	mov	eax, DWORD PTR _argv$[ebp]
	add	eax, 4
	mov	DWORD PTR _argv$[ebp], eax
	mov	ecx, DWORD PTR _argc$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _argc$[ebp], ecx
; Line 777
	jns	SHORT $LN4@main
; Line 778
	push	OFFSET $SG80302
	call	_printf
	add	esp, 4
; Line 779
	mov	eax, 22					; 00000016H
	jmp	$LN31@main
$LN4@main:
; Line 781
	mov	edx, DWORD PTR _historyName$[ebp]
	push	edx
	push	OFFSET $SG80303
	call	_addHistory
	add	esp, 8
; Line 782
	push	2
	mov	eax, DWORD PTR _procId$2[ebp]
	push	eax
	call	_signalProcess
	add	esp, 8
	jmp	SHORT $LN9@main
$LN5@main:
; Line 783
	push	OFFSET $SG80306
	mov	ecx, DWORD PTR _cmd$[ebp]
	push	ecx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN9@main
; Line 784
	push	0
	push	0
	mov	edx, DWORD PTR _argv$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_strtol
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _procId$1[ebp], eax
; Line 785
	mov	ecx, DWORD PTR _argv$[ebp]
	add	ecx, 4
	mov	DWORD PTR _argv$[ebp], ecx
	mov	edx, DWORD PTR _argc$[ebp]
	sub	edx, 1
	mov	DWORD PTR _argc$[ebp], edx
; Line 786
	jns	SHORT $LN1@main
; Line 787
	push	OFFSET $SG80310
	call	_printf
	add	esp, 4
; Line 788
	mov	eax, 22					; 00000016H
	jmp	SHORT $LN31@main
$LN1@main:
; Line 790
	mov	eax, DWORD PTR _historyName$[ebp]
	push	eax
	push	OFFSET $SG80311
	call	_addHistory
	add	esp, 8
; Line 791
	push	3
	mov	ecx, DWORD PTR _procId$1[ebp]
	push	ecx
	call	_signalProcess
	add	esp, 8
$LN9@main:
; Line 794
	xor	eax, eax
$LN31@main:
; Line 795
	pop	edi
	add	esp, 64					; 00000040H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN33@main:
	DD	$LN22@main
	DD	$LN21@main
	DD	$LN19@main
	DD	$LN23@main
	DD	$LN20@main
	DD	$LN24@main
$LN32@main:
	DB	0
	DB	5
	DB	5
	DB	1
	DB	5
	DB	5
	DB	5
	DB	5
	DB	2
	DB	5
	DB	3
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	5
	DB	4
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T1 = -12						; size = 4
_hasWhiteSpace$ = -8					; size = 4
_i$ = -4						; size = 4
_input$ = 8						; size = 4
_quoteSpaces PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 296
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 299
	mov	DWORD PTR _hasWhiteSpace$[ebp], 0
; Line 300
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN6@quoteSpace
$LN5@quoteSpace:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@quoteSpace:
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN4@quoteSpace
	cmp	DWORD PTR _i$[ebp], 509			; 000001fdH
	jae	SHORT $LN4@quoteSpace
; Line 301
	mov	edx, DWORD PTR _input$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR [edx]
	push	eax
	call	_isspace
	add	esp, 4
	test	eax, eax
	je	SHORT $LN3@quoteSpace
; Line 302
	mov	DWORD PTR _hasWhiteSpace$[ebp], 1
; Line 303
	jmp	SHORT $LN4@quoteSpace
$LN3@quoteSpace:
; Line 305
	jmp	SHORT $LN5@quoteSpace
$LN4@quoteSpace:
; Line 306
	mov	ecx, 1
	imul	edx, ecx, 0
	mov	DWORD PTR $T1[ebp], edx
	cmp	DWORD PTR $T1[ebp], 512			; 00000200H
	jae	SHORT $LN9@quoteSpace
	jmp	SHORT $LN10@quoteSpace
$LN9@quoteSpace:
	call	___report_rangecheckfailure
$LN10@quoteSpace:
	mov	eax, DWORD PTR $T1[ebp]
	mov	BYTE PTR ?output@?1??quoteSpaces@@9@9[eax], 0
; Line 307
	cmp	DWORD PTR _hasWhiteSpace$[ebp], 0
	je	SHORT $LN2@quoteSpace
; Line 308
	push	OFFSET $SG80079
	push	OFFSET ?output@?1??quoteSpaces@@9@9
	call	_strcat
	add	esp, 8
; Line 309
	mov	ecx, DWORD PTR _input$[ebp]
	push	ecx
	push	OFFSET ?output@?1??quoteSpaces@@9@9
	call	_strcat
	add	esp, 8
; Line 310
	push	OFFSET $SG80080
	push	OFFSET ?output@?1??quoteSpaces@@9@9
	call	_strcat
	add	esp, 8
; Line 311
	jmp	SHORT $LN1@quoteSpace
$LN2@quoteSpace:
; Line 312
	push	OFFSET $SG80082
	push	OFFSET ?output@?1??quoteSpaces@@9@9
	call	_strcat
	add	esp, 8
; Line 313
	mov	edx, DWORD PTR _input$[ebp]
	push	edx
	push	OFFSET ?output@?1??quoteSpaces@@9@9
	call	_strcat
	add	esp, 8
$LN1@quoteSpace:
; Line 315
	mov	eax, OFFSET ?output@?1??quoteSpaces@@9@9
$LN8@quoteSpace:
; Line 316
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_quoteSpaces ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fd$ = -8						; size = 4
_h$ = -4						; size = 4
_fname$ = 8						; size = 4
_openFileHandle PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 272
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 276
	push	438					; 000001b6H
	push	258					; 00000102H
	mov	eax, DWORD PTR _fname$[ebp]
	push	eax
	call	__open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fd$[ebp], eax
; Line 277
	mov	ecx, DWORD PTR _fd$[ebp]
	push	ecx
	call	__get_osfhandle
	add	esp, 4
	mov	DWORD PTR _h$[ebp], eax
; Line 291
	mov	esi, esp
	push	1
	push	1
	mov	edx, DWORD PTR _h$[ebp]
	push	edx
	call	DWORD PTR __imp__SetHandleInformation@12
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 292
	mov	eax, DWORD PTR _h$[ebp]
; Line 293
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_openFileHandle ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_tStr$ = -8						; size = 4
_tLen$ = -4						; size = 4
_str$ = 8						; size = 4
_str2tstr PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 258
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 261
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	lea	ecx, DWORD PTR [eax+eax+2]
	mov	DWORD PTR _tLen$[ebp], ecx
; Line 262
	mov	edx, DWORD PTR _tLen$[ebp]
	push	edx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _tStr$[ebp], eax
; Line 263
	mov	eax, DWORD PTR _tLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	mov	edx, DWORD PTR _tStr$[ebp]
	push	edx
	call	_mbstowcs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _tLen$[ebp], eax
; Line 264
	cmp	DWORD PTR _tLen$[ebp], 0
	jae	SHORT $LN1@str2tstr
; Line 265
	mov	eax, DWORD PTR _tStr$[ebp]
	push	eax
	call	_free
	add	esp, 4
; Line 266
	xor	eax, eax
	jmp	SHORT $LN2@str2tstr
$LN1@str2tstr:
; Line 268
	mov	eax, DWORD PTR _tStr$[ebp]
$LN2@str2tstr:
; Line 269
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_str2tstr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_name$ = 8						; size = 4
_errExit PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 226
	push	ebp
	mov	ebp, esp
	push	esi
; Line 227
	push	OFFSET $SG80034
	call	_printf
	add	esp, 4
; Line 228
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	push	eax
	call	_fflush
	add	esp, 4
; Line 229
	mov	esi, esp
	push	10					; 0000000aH
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 230
	mov	edx, DWORD PTR _name$[ebp]
	push	edx
	mov	eax, DWORD PTR _progname
	push	eax
	call	_printError
	add	esp, 8
; Line 231
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fflush
	add	esp, 4
; Line 232
	mov	esi, esp
	push	1000					; 000003e8H
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 233
	push	1
	call	_exit
$LN2@errExit:
; Line 234
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_errExit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_procId$ = 8						; size = 4
_KillProcess PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 195
	push	ebp
	mov	ebp, esp
; Line 196
	mov	eax, DWORD PTR _procId$[ebp]
	push	eax
	call	_TerminateProcessTree
	add	esp, 4
; Line 198
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_KillProcess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hProc$ = -592						; size = 4
_err$ = -588						; size = 4
_pe32$ = -580						; size = 556
_hProcessSnap$ = -20					; size = 4
_destroyHandle$ = -16					; size = 4
_bRet$ = -12						; size = 4
_exeFile$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_dwPID$ = 8						; size = 4
_TerminateProcessTree PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 104
	push	ebp
	mov	ebp, esp
	sub	esp, 592				; 00000250H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-592]
	mov	ecx, 148				; 00000094H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 106
	mov	DWORD PTR _bRet$[ebp], 0
; Line 107
	mov	DWORD PTR _destroyHandle$[ebp], 0
; Line 109
	mov	DWORD PTR _pe32$[ebp], 0
	push	552					; 00000228H
	push	0
	lea	eax, DWORD PTR _pe32$[ebp+4]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 114
	cmp	DWORD PTR _dwPID$[ebp], 0
	ja	SHORT $LN12@TerminateP
; Line 115
	mov	ecx, DWORD PTR _dwPID$[ebp]
	push	ecx
	push	OFFSET $SG79969
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 116
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	116					; 00000074H
	push	OFFSET $SG79970
	push	OFFSET $SG79971
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 117
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	OFFSET $SG79972
	call	___iob_func
	mov	edx, 32					; 00000020H
	shl	edx, 1
	add	eax, edx
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 118
	xor	eax, eax
	jmp	$LN13@TerminateP
$LN12@TerminateP:
; Line 122
	mov	esi, esp
	mov	eax, DWORD PTR _dwPID$[ebp]
	push	eax
	push	0
	push	2035711					; 001f0fffH
	call	DWORD PTR __imp__OpenProcess@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hProc$[ebp], eax
; Line 123
	cmp	DWORD PTR _hProc$[ebp], 0
	jne	$LN11@TerminateP
; Line 124
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 125
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwPID$[ebp]
	push	edx
	push	OFFSET $SG79975
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 126
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	126					; 0000007eH
	push	OFFSET $SG79976
	push	OFFSET $SG79977
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 127
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	OFFSET $SG79978
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 128
	xor	eax, eax
	jmp	$LN13@TerminateP
$LN11@TerminateP:
; Line 131
	mov	esi, esp
	mov	edx, DWORD PTR _hProc$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 135
	push	0
	push	2
	call	_CreateToolhelp32Snapshot@8
	mov	DWORD PTR _hProcessSnap$[ebp], eax
; Line 136
	cmp	DWORD PTR _hProcessSnap$[ebp], -1
	jne	SHORT $LN10@TerminateP
; Line 137
	xor	eax, eax
	jmp	$LN13@TerminateP
$LN10@TerminateP:
; Line 140
	mov	DWORD PTR _pe32$[ebp], 556		; 0000022cH
; Line 141
	lea	eax, DWORD PTR _pe32$[ebp]
	push	eax
	mov	ecx, DWORD PTR _hProcessSnap$[ebp]
	push	ecx
	call	_Process32FirstW@8
	test	eax, eax
	jne	SHORT $LN8@TerminateP
; Line 142
	mov	esi, esp
	mov	edx, DWORD PTR _hProcessSnap$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 143
	xor	eax, eax
	jmp	$LN13@TerminateP
$LN8@TerminateP:
; Line 152
	mov	eax, DWORD PTR _pe32$[ebp+8]
	cmp	eax, DWORD PTR _dwPID$[ebp]
	jne	$LN5@TerminateP
; Line 153
	lea	ecx, DWORD PTR _pe32$[ebp+36]
	push	ecx
	call	_tstr2str
	add	esp, 4
	mov	DWORD PTR _exeFile$[ebp], eax
; Line 154
	mov	edx, DWORD PTR _exeFile$[ebp]
	push	edx
	mov	eax, DWORD PTR _pe32$[ebp+8]
	push	eax
	push	OFFSET $SG79988
	call	_printf
	add	esp, 12					; 0000000cH
; Line 155
	push	OFFSET $SG79991
	mov	ecx, DWORD PTR _exeFile$[ebp]
	push	ecx
	call	_strstr
	add	esp, 8
	test	eax, eax
	je	SHORT $LN4@TerminateP
; Line 157
	push	OFFSET $SG79992
	push	157					; 0000009dH
	push	OFFSET $SG79993
	push	OFFSET $SG79994
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 158
	mov	edx, DWORD PTR _exeFile$[ebp]
	push	edx
	call	_free
	add	esp, 4
; Line 159
	xor	eax, eax
	jmp	$LN13@TerminateP
$LN4@TerminateP:
; Line 161
	mov	eax, DWORD PTR _exeFile$[ebp]
	push	eax
	call	_free
	add	esp, 4
$LN5@TerminateP:
; Line 163
	mov	ecx, DWORD PTR _pe32$[ebp+24]
	cmp	ecx, DWORD PTR _dwPID$[ebp]
	jne	SHORT $LN7@TerminateP
; Line 165
	mov	edx, DWORD PTR _pe32$[ebp+8]
	push	edx
	push	OFFSET $SG79996
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 166
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	166					; 000000a6H
	push	OFFSET $SG79997
	push	OFFSET $SG79998
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 167
	mov	eax, DWORD PTR _pe32$[ebp+8]
	push	eax
	call	_TerminateProcessTree
	add	esp, 4
$LN7@TerminateP:
; Line 169
	lea	ecx, DWORD PTR _pe32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hProcessSnap$[ebp]
	push	edx
	call	_Process32NextW@8
	test	eax, eax
	jne	$LN8@TerminateP
; Line 171
	mov	esi, esp
	mov	eax, DWORD PTR _dwPID$[ebp]
	push	eax
	push	0
	push	2035711					; 001f0fffH
	call	DWORD PTR __imp__OpenProcess@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hProc$[ebp], eax
; Line 172
	cmp	DWORD PTR _hProc$[ebp], 0
	jne	$LN2@TerminateP
; Line 173
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 174
	mov	ecx, DWORD PTR _err$[ebp]
	push	ecx
	mov	edx, DWORD PTR _dwPID$[ebp]
	push	edx
	push	OFFSET $SG80001
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 175
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	175					; 000000afH
	push	OFFSET $SG80002
	push	OFFSET $SG80003
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 176
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	OFFSET $SG80004
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 177
	mov	esi, esp
	mov	edx, DWORD PTR _hProcessSnap$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 178
	xor	eax, eax
	jmp	$LN13@TerminateP
$LN2@TerminateP:
; Line 180
	mov	eax, DWORD PTR _dwPID$[ebp]
	push	eax
	push	OFFSET $SG80005
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	call	_sprintf
	add	esp, 12					; 0000000cH
; Line 181
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	181					; 000000b5H
	push	OFFSET $SG80006
	push	OFFSET $SG80007
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 182
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _hProc$[ebp]
	push	ecx
	call	DWORD PTR __imp__TerminateProcess@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	$LN1@TerminateP
; Line 183
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _err$[ebp], eax
; Line 184
	mov	edx, DWORD PTR _err$[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _hProc$[ebp]
	push	eax
	push	OFFSET $SG80009
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	call	_sprintf
	add	esp, 20					; 00000014H
; Line 185
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	185					; 000000b9H
	push	OFFSET $SG80010
	push	OFFSET $SG80011
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 186
	push	OFFSET ?outstr@?1??TerminateProcessTree@@9@9
	push	OFFSET $SG80012
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
$LN1@TerminateP:
; Line 188
	mov	esi, esp
	mov	edx, DWORD PTR _hProc$[ebp]
	push	edx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 189
	mov	esi, esp
	mov	eax, DWORD PTR _hProcessSnap$[ebp]
	push	eax
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 191
	mov	eax, 1
$LN13@TerminateP:
; Line 192
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@TerminateP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 592				; 00000250H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN17@TerminateP:
	DD	1
	DD	$LN16@TerminateP
$LN16@TerminateP:
	DD	-580					; fffffdbcH
	DD	556					; 0000022cH
	DD	$LN15@TerminateP
$LN15@TerminateP:
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	0
_TerminateProcessTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_str$ = -12						; size = 4
_sLen$ = -8						; size = 4
_i$ = -4						; size = 4
_tstr$ = 8						; size = 4
_tstr2str PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 238
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 242
	push	0
	mov	eax, DWORD PTR _tstr$[ebp]
	push	eax
	push	0
	call	_wcstombs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sLen$[ebp], eax
; Line 244
	mov	ecx, DWORD PTR _sLen$[ebp]
	add	ecx, 1
	push	ecx
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _str$[ebp], eax
; Line 245
	mov	edx, DWORD PTR _sLen$[ebp]
	add	edx, 1
	mov	DWORD PTR _sLen$[ebp], edx
; Line 246
	mov	eax, DWORD PTR _sLen$[ebp]
	push	eax
	mov	ecx, DWORD PTR _tstr$[ebp]
	push	ecx
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	call	_wcstombs
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _sLen$[ebp], eax
; Line 247
	cmp	DWORD PTR _sLen$[ebp], 0
	jae	SHORT $LN4@tstr2str
; Line 248
	mov	eax, DWORD PTR _str$[ebp]
	push	eax
	call	_free
	add	esp, 4
; Line 249
	xor	eax, eax
	jmp	SHORT $LN5@tstr2str
$LN4@tstr2str:
; Line 251
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@tstr2str
$LN2@tstr2str:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN3@tstr2str:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _sLen$[ebp]
	jge	SHORT $LN1@tstr2str
; Line 252
	mov	eax, DWORD PTR _str$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	movsx	ecx, BYTE PTR [eax]
	push	ecx
	call	_tolower
	add	esp, 4
	mov	edx, DWORD PTR _str$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx], al
; Line 253
	jmp	SHORT $LN2@tstr2str
$LN1@tstr2str:
; Line 254
	mov	eax, DWORD PTR _str$[ebp]
$LN5@tstr2str:
; Line 255
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_tstr2str ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fd$ = -8						; size = 4
_date$ = -4						; size = 4
_str$ = 8						; size = 4
_writelog PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 573
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 574
	call	_format_timeofday
	mov	DWORD PTR _date$[ebp], eax
; Line 575
	push	438					; 000001b6H
	push	266					; 0000010aH
	push	OFFSET _pm_logname
	call	__open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _fd$[ebp], eax
; Line 576
	cmp	DWORD PTR _fd$[ebp], 0
	jge	SHORT $LN2@writelog
; Line 577
	push	OFFSET _pm_logname
	call	_perror
	add	esp, 4
; Line 578
	jmp	$LN3@writelog
$LN2@writelog:
; Line 580
	mov	eax, DWORD PTR _date$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	mov	ecx, DWORD PTR _date$[ebp]
	push	ecx
	mov	edx, DWORD PTR _fd$[ebp]
	push	edx
	call	__write
	add	esp, 12					; 0000000cH
; Line 581
	push	2
	push	OFFSET $SG80182
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	__write
	add	esp, 12					; 0000000cH
; Line 582
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	push	eax
	mov	edx, DWORD PTR _str$[ebp]
	push	edx
	mov	eax, DWORD PTR _fd$[ebp]
	push	eax
	call	__write
	add	esp, 12					; 0000000cH
; Line 583
	mov	ecx, DWORD PTR _str$[ebp]
	push	ecx
	call	_strlen
	add	esp, 4
	mov	edx, DWORD PTR _str$[ebp]
	movsx	eax, BYTE PTR [edx+eax-1]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN1@writelog
; Line 584
	push	1
	push	OFFSET $SG80185
	mov	ecx, DWORD PTR _fd$[ebp]
	push	ecx
	call	__write
	add	esp, 12					; 0000000cH
$LN1@writelog:
; Line 586
	mov	edx, DWORD PTR _fd$[ebp]
	push	edx
	call	__close
	add	esp, 4
$LN3@writelog:
; Line 587
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_writelog ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_workdir$ = -276					; size = 4
_tmpbuf$ = -268						; size = 260
__$ArrayPad$ = -4					; size = 4
_setWorkDir PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 591
	push	ebp
	mov	ebp, esp
	sub	esp, 276				; 00000114H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-276]
	mov	ecx, 69					; 00000045H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 596
	push	OFFSET $SG80190
	call	_getenv
	add	esp, 4
	mov	DWORD PTR _workdir$[ebp], eax
; Line 597
	cmp	DWORD PTR _workdir$[ebp], 0
	jne	SHORT $LN4@setWorkDir
; Line 598
	push	OFFSET $SG80193
	call	_getenv
	add	esp, 4
	mov	DWORD PTR _workdir$[ebp], eax
; Line 599
	cmp	DWORD PTR _workdir$[ebp], 0
	jne	SHORT $LN4@setWorkDir
; Line 600
	push	OFFSET $SG80196
	call	_getenv
	add	esp, 4
	mov	DWORD PTR _workdir$[ebp], eax
; Line 601
	cmp	DWORD PTR _workdir$[ebp], 0
	jne	SHORT $LN4@setWorkDir
; Line 603
	mov	esi, esp
	push	260					; 00000104H
	lea	eax, DWORD PTR _tmpbuf$[ebp]
	push	eax
	call	DWORD PTR __imp__GetWindowsDirectoryA@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 604
	push	OFFSET $SG80199
	lea	ecx, DWORD PTR _tmpbuf$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
; Line 605
	lea	edx, DWORD PTR _tmpbuf$[ebp]
	mov	DWORD PTR _workdir$[ebp], edx
$LN4@setWorkDir:
; Line 612
	mov	eax, DWORD PTR _workdir$[ebp]
	push	eax
	push	612					; 00000264H
	push	OFFSET $SG80200
	push	OFFSET $SG80201
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 613
	mov	ecx, DWORD PTR _workdir$[ebp]
	push	ecx
	call	__chdir
	add	esp, 4
	test	eax, eax
	je	SHORT $LN1@setWorkDir
; Line 614
	xor	eax, eax
	jmp	SHORT $LN5@setWorkDir
$LN1@setWorkDir:
; Line 616
	mov	eax, 1
$LN5@setWorkDir:
; Line 617
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@setWorkDir
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 276				; 00000114H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN9@setWorkDir:
	DD	1
	DD	$LN8@setWorkDir
$LN8@setWorkDir:
	DD	-268					; fffffef4H
	DD	260					; 00000104H
	DD	$LN7@setWorkDir
$LN7@setWorkDir:
	DB	116					; 00000074H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_setWorkDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_stateMsg$ = -524					; size = 512
_histFd$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_message$ = 8						; size = 4
_fName$ = 12						; size = 4
_addHistory PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 528				; 00000210H
	push	edi
	lea	edi, DWORD PTR [ebp-528]
	mov	ecx, 132				; 00000084H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 648
	cmp	DWORD PTR _fName$[ebp], 0
	jne	SHORT $LN3@addHistory
; Line 649
	jmp	$LN4@addHistory
$LN3@addHistory:
; Line 651
	push	438					; 000001b6H
	push	266					; 0000010aH
	mov	eax, DWORD PTR _fName$[ebp]
	push	eax
	call	__open
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _histFd$[ebp], eax
; Line 652
	cmp	DWORD PTR _histFd$[ebp], 0
	jl	SHORT $LN2@addHistory
; Line 653
	call	_format_timeofday
	push	eax
	mov	ecx, DWORD PTR _message$[ebp]
	push	ecx
	push	OFFSET $SG80220
	lea	edx, DWORD PTR _stateMsg$[ebp]
	push	edx
	call	_sprintf
	add	esp, 16					; 00000010H
; Line 654
	lea	eax, DWORD PTR _stateMsg$[ebp]
	push	eax
	call	_strlen
	add	esp, 4
	push	eax
	lea	ecx, DWORD PTR _stateMsg$[ebp]
	push	ecx
	mov	edx, DWORD PTR _histFd$[ebp]
	push	edx
	call	__write
	add	esp, 12					; 0000000cH
; Line 655
	mov	eax, DWORD PTR _histFd$[ebp]
	push	eax
	call	__close
	add	esp, 4
; Line 656
	jmp	SHORT $LN4@addHistory
$LN2@addHistory:
; Line 657
	mov	ecx, DWORD PTR _fName$[ebp]
	push	ecx
	call	_perror
	add	esp, 4
; Line 658
	push	OFFSET $SG80223
	push	658					; 00000292H
	push	OFFSET $SG80224
	push	OFFSET $SG80225
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
$LN4@addHistory:
; Line 660
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@addHistory
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 528				; 00000210H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN8@addHistory:
	DD	1
	DD	$LN7@addHistory
$LN7@addHistory:
	DD	-524					; fffffdf4H
	DD	512					; 00000200H
	DD	$LN6@addHistory
$LN6@addHistory:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	0
_addHistory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_ptm$ = -20						; size = 4
_tt$ = -12						; size = 8
_format_timeofday PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 621
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 632
	lea	eax, DWORD PTR _tt$[ebp]
	push	eax
	call	_time
	add	esp, 4
; Line 633
	lea	ecx, DWORD PTR _tt$[ebp]
	push	ecx
	call	_localtime
	add	esp, 4
	mov	DWORD PTR _ptm$[ebp], eax
; Line 640
	mov	edx, DWORD PTR _ptm$[ebp]
	push	edx
	push	OFFSET $SG80209
	push	40					; 00000028H
	push	OFFSET ?time_string@?1??format_timeofday@@9@9
	call	_strftime
	add	esp, 16					; 00000010H
; Line 641
	mov	eax, OFFSET ?time_string@?1??format_timeofday@@9@9
; Line 642
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@format_tim
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@format_tim:
	DD	1
	DD	$LN4@format_tim
$LN4@format_tim:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN3@format_tim
$LN3@format_tim:
	DB	116					; 00000074H
	DB	116					; 00000074H
	DB	0
_format_timeofday ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_charBuf$ = -536					; size = 512
_dw$ = -20						; size = 4
_lpMsgBuf$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_progName$ = 8						; size = 4
_execFile$ = 12						; size = 4
_printError PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 540				; 0000021cH
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-540]
	mov	ecx, 135				; 00000087H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 545
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _dw$[ebp], eax
; Line 556
	mov	esi, esp
	push	0
	push	0
	lea	eax, DWORD PTR _lpMsgBuf$[ebp]
	push	eax
	push	1024					; 00000400H
	mov	ecx, DWORD PTR _dw$[ebp]
	push	ecx
	push	0
	push	4864					; 00001300H
	call	DWORD PTR __imp__FormatMessageW@28
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 557
	push	512					; 00000200H
	mov	edx, DWORD PTR _lpMsgBuf$[ebp]
	push	edx
	lea	eax, DWORD PTR _charBuf$[ebp]
	push	eax
	call	_wcstombs
	add	esp, 12					; 0000000cH
; Line 561
	lea	ecx, DWORD PTR _charBuf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _execFile$[ebp]
	push	edx
	push	OFFSET $SG80174
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fprintf
	add	esp, 16					; 00000010H
; Line 562
	mov	esi, esp
	mov	edx, DWORD PTR _lpMsgBuf$[ebp]
	push	edx
	call	DWORD PTR __imp__LocalFree@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 570
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@printError
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 540				; 0000021cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@printError:
	DD	2
	DD	$LN5@printError
$LN5@printError:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@printError
	DD	-536					; fffffde8H
	DD	512					; 00000200H
	DD	$LN4@printError
$LN4@printError:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN3@printError:
	DB	108					; 0000006cH
	DB	112					; 00000070H
	DB	77					; 0000004dH
	DB	115					; 00000073H
	DB	103					; 00000067H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_printError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_hThread$1 = -52					; size = 4
_te32$ = -44						; size = 28
_bRet$ = -12						; size = 4
_hThreadSnap$ = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_dwOwnerPID$ = 8					; size = 4
_bResumeThread$ = 12					; size = 4
_PauseResumeThreadList PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 411
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 412
	mov	DWORD PTR _hThreadSnap$[ebp], 0
; Line 413
	mov	DWORD PTR _bRet$[ebp], 0
; Line 414
	mov	DWORD PTR _te32$[ebp], 0
	xor	eax, eax
	mov	DWORD PTR _te32$[ebp+4], eax
	mov	DWORD PTR _te32$[ebp+8], eax
	mov	DWORD PTR _te32$[ebp+12], eax
	mov	DWORD PTR _te32$[ebp+16], eax
	mov	DWORD PTR _te32$[ebp+20], eax
	mov	DWORD PTR _te32$[ebp+24], eax
; Line 418
	push	0
	push	4
	call	_CreateToolhelp32Snapshot@8
	mov	DWORD PTR _hThreadSnap$[ebp], eax
; Line 419
	cmp	DWORD PTR _hThreadSnap$[ebp], -1
	jne	SHORT $LN9@PauseResum
; Line 420
	xor	eax, eax
	jmp	$LN10@PauseResum
$LN9@PauseResum:
; Line 425
	mov	DWORD PTR _te32$[ebp], 28		; 0000001cH
; Line 431
	lea	ecx, DWORD PTR _te32$[ebp]
	push	ecx
	mov	edx, DWORD PTR _hThreadSnap$[ebp]
	push	edx
	call	_Thread32First@8
	test	eax, eax
	je	SHORT $LN8@PauseResum
$LN7@PauseResum:
; Line 433
	mov	eax, DWORD PTR _te32$[ebp+12]
	cmp	eax, DWORD PTR _dwOwnerPID$[ebp]
	jne	SHORT $LN6@PauseResum
; Line 434
	mov	esi, esp
	mov	ecx, DWORD PTR _te32$[ebp+8]
	push	ecx
	push	0
	push	2
	call	DWORD PTR __imp__OpenThread@12
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _hThread$1[ebp], eax
; Line 435
	cmp	DWORD PTR _bResumeThread$[ebp], 0
	je	SHORT $LN3@PauseResum
; Line 436
	mov	esi, esp
	mov	edx, DWORD PTR _hThread$1[ebp]
	push	edx
	call	DWORD PTR __imp__ResumeThread@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 437
	jmp	SHORT $LN2@PauseResum
$LN3@PauseResum:
; Line 438
	mov	esi, esp
	mov	eax, DWORD PTR _hThread$1[ebp]
	push	eax
	call	DWORD PTR __imp__SuspendThread@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@PauseResum:
; Line 440
	mov	esi, esp
	mov	ecx, DWORD PTR _hThread$1[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN6@PauseResum:
; Line 443
	lea	edx, DWORD PTR _te32$[ebp]
	push	edx
	mov	eax, DWORD PTR _hThreadSnap$[ebp]
	push	eax
	call	_Thread32Next@8
	test	eax, eax
	jne	SHORT $LN7@PauseResum
; Line 444
	mov	DWORD PTR _bRet$[ebp], 1
; Line 445
	jmp	SHORT $LN1@PauseResum
$LN8@PauseResum:
; Line 446
	mov	DWORD PTR _bRet$[ebp], 0
$LN1@PauseResum:
; Line 450
	mov	esi, esp
	mov	ecx, DWORD PTR _hThreadSnap$[ebp]
	push	ecx
	call	DWORD PTR __imp__CloseHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 452
	mov	eax, DWORD PTR _bRet$[ebp]
$LN10@PauseResum:
; Line 453
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@PauseResum
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN14@PauseResum:
	DD	1
	DD	$LN13@PauseResum
$LN13@PauseResum:
	DD	-44					; ffffffd4H
	DD	28					; 0000001cH
	DD	$LN12@PauseResum
$LN12@PauseResum:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	51					; 00000033H
	DB	50					; 00000032H
	DB	0
_PauseResumeThreadList ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_resumeVal$1 = -136					; size = 4
_procId$2 = -132					; size = 4
_hOut$ = -128						; size = 4
_hErr$ = -124						; size = 4
_tCmdLine$ = -120					; size = 4
_startupInfo$ = -112					; size = 68
_procInfo$ = -36					; size = 16
_i$ = -16						; size = 4
_cmdLength$ = -12					; size = 4
_cmdLine$ = -8						; size = 4
_retVal$ = -4						; size = 4
_cmd$ = 8						; size = 4
_args$ = 12						; size = 4
_outFile$ = 16						; size = 4
_errFile$ = 20						; size = 4
_histFile$ = 24						; size = 4
_winStartProcess PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 321
	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-136]
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 331
	mov	eax, DWORD PTR _errFile$[ebp]
	push	eax
	call	_openFileHandle
	add	esp, 4
	mov	DWORD PTR _hErr$[ebp], eax
; Line 332
	mov	ecx, DWORD PTR _errFile$[ebp]
	push	ecx
	mov	edx, DWORD PTR _outFile$[ebp]
	push	edx
	call	__stricmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN13@winStartPr
; Line 333
	mov	eax, DWORD PTR _hErr$[ebp]
	mov	DWORD PTR _hOut$[ebp], eax
; Line 334
	jmp	SHORT $LN12@winStartPr
$LN13@winStartPr:
; Line 335
	mov	ecx, DWORD PTR _outFile$[ebp]
	push	ecx
	call	_openFileHandle
	add	esp, 4
	mov	DWORD PTR _hOut$[ebp], eax
$LN12@winStartPr:
; Line 338
	cmp	DWORD PTR _hErr$[ebp], 0
	jne	SHORT $LN11@winStartPr
; Line 339
	mov	edx, DWORD PTR _errFile$[ebp]
	push	edx
	call	_errExit
	add	esp, 4
$LN11@winStartPr:
; Line 341
	cmp	DWORD PTR _hOut$[ebp], 0
	jne	SHORT $LN10@winStartPr
; Line 342
	mov	eax, DWORD PTR _outFile$[ebp]
	push	eax
	call	_errExit
	add	esp, 4
$LN10@winStartPr:
; Line 344
	push	16					; 00000010H
	push	0
	lea	ecx, DWORD PTR _procInfo$[ebp]
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 345
	push	68					; 00000044H
	push	0
	lea	edx, DWORD PTR _startupInfo$[ebp]
	push	edx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 347
	mov	DWORD PTR _startupInfo$[ebp], 68	; 00000044H
; Line 348
	mov	eax, DWORD PTR _hErr$[ebp]
	mov	DWORD PTR _startupInfo$[ebp+64], eax
; Line 349
	mov	ecx, DWORD PTR _hOut$[ebp]
	mov	DWORD PTR _startupInfo$[ebp+60], ecx
; Line 350
	mov	esi, esp
	push	-10					; fffffff6H
	call	DWORD PTR __imp__GetStdHandle@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _startupInfo$[ebp+56], eax
; Line 351
	mov	DWORD PTR _startupInfo$[ebp+44], 256	; 00000100H
; Line 352
	mov	edx, DWORD PTR _cmd$[ebp]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, 2
	mov	DWORD PTR _cmdLength$[ebp], eax
; Line 353
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN9@winStartPr
$LN8@winStartPr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@winStartPr:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN7@winStartPr
; Line 354
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_strlen
	add	esp, 4
	add	eax, DWORD PTR _cmdLength$[ebp]
	mov	DWORD PTR _cmdLength$[ebp], eax
; Line 355
	jmp	SHORT $LN8@winStartPr
$LN7@winStartPr:
; Line 356
	imul	eax, DWORD PTR _i$[ebp], 3
	mov	ecx, DWORD PTR _cmdLength$[ebp]
	lea	edx, DWORD PTR [ecx+eax+1]
	mov	DWORD PTR _cmdLength$[ebp], edx
; Line 357
	mov	eax, DWORD PTR _cmdLength$[ebp]
	push	eax
	call	_malloc
	add	esp, 4
	mov	DWORD PTR _cmdLine$[ebp], eax
; Line 358
	mov	ecx, DWORD PTR _cmdLine$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 359
	push	OFFSET $SG80115
	mov	edx, DWORD PTR _cmdLine$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 360
	mov	eax, DWORD PTR _cmd$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cmdLine$[ebp]
	push	ecx
	call	_strcat
	add	esp, 8
; Line 361
	push	OFFSET $SG80116
	mov	edx, DWORD PTR _cmdLine$[ebp]
	push	edx
	call	_strcat
	add	esp, 8
; Line 362
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN6@winStartPr
$LN5@winStartPr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN6@winStartPr:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _args$[ebp]
	cmp	DWORD PTR [edx+ecx*4], 0
	je	SHORT $LN4@winStartPr
; Line 363
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _args$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	call	_quoteSpaces
	add	esp, 4
	push	eax
	mov	eax, DWORD PTR _cmdLine$[ebp]
	push	eax
	call	_strcat
	add	esp, 8
; Line 367
	jmp	SHORT $LN5@winStartPr
$LN4@winStartPr:
; Line 369
	mov	ecx, DWORD PTR _cmdLine$[ebp]
	push	ecx
	push	369					; 00000171H
	push	OFFSET $SG80121
	push	OFFSET $SG80122
	push	OFFSET _tracestr
	call	_sprintf
	add	esp, 20					; 00000014H
	push	OFFSET _tracestr
	call	_writelog
	add	esp, 4
; Line 370
	mov	edx, DWORD PTR _cmdLine$[ebp]
	push	edx
	call	_str2tstr
	add	esp, 4
	mov	DWORD PTR _tCmdLine$[ebp], eax
; Line 372
	call	_setWorkDir
	test	eax, eax
	jne	SHORT $LN3@winStartPr
; Line 373
	push	OFFSET $SG80124
	call	_printf
	add	esp, 4
; Line 374
	mov	eax, DWORD PTR _progname
	push	eax
	push	OFFSET $SG80125
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 1
	add	eax, ecx
	push	eax
	call	_fprintf
	add	esp, 12					; 0000000cH
; Line 375
	mov	esi, esp
	push	10					; 0000000aH
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 376
	call	__errno
	mov	eax, DWORD PTR [eax]
	jmp	$LN14@winStartPr
$LN3@winStartPr:
; Line 389
	mov	esi, esp
	lea	edx, DWORD PTR _procInfo$[ebp]
	push	edx
	lea	eax, DWORD PTR _startupInfo$[ebp]
	push	eax
	push	0
	push	0
	push	4
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR _tCmdLine$[ebp]
	push	ecx
	push	0
	call	DWORD PTR __imp__CreateProcessW@40
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _retVal$[ebp], eax
; Line 390
	mov	edx, DWORD PTR _tCmdLine$[ebp]
	push	edx
	call	_free
	add	esp, 4
; Line 392
	cmp	DWORD PTR _retVal$[ebp], 0
	jne	SHORT $LN2@winStartPr
; Line 393
	mov	eax, DWORD PTR _histFile$[ebp]
	push	eax
	push	OFFSET $SG80132
	call	_addHistory
	add	esp, 8
; Line 394
	mov	ecx, DWORD PTR _cmd$[ebp]
	push	ecx
	call	_errExit
	add	esp, 4
; Line 395
	jmp	$LN1@winStartPr
$LN2@winStartPr:
; Line 396
	mov	edx, DWORD PTR _procInfo$[ebp+8]
	mov	DWORD PTR _procId$2[ebp], edx
; Line 398
	mov	eax, DWORD PTR _procId$2[ebp]
	push	eax
	push	OFFSET $SG80136
	call	_printf
	add	esp, 8
; Line 399
	call	___iob_func
	mov	ecx, 32					; 00000020H
	shl	ecx, 0
	add	eax, ecx
	push	eax
	call	_fflush
	add	esp, 4
; Line 400
	mov	edx, DWORD PTR _histFile$[ebp]
	push	edx
	push	OFFSET $SG80137
	call	_addHistory
	add	esp, 8
; Line 401
	mov	esi, esp
	push	100					; 00000064H
	call	DWORD PTR __imp__Sleep@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 402
	mov	esi, esp
	mov	eax, DWORD PTR _procInfo$[ebp+4]
	push	eax
	call	DWORD PTR __imp__ResumeThread@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _resumeVal$1[ebp], eax
; Line 403
	mov	esi, esp
	push	-1
	mov	ecx, DWORD PTR _procInfo$[ebp]
	push	ecx
	call	DWORD PTR __imp__WaitForSingleObject@8
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 404
	mov	edx, DWORD PTR _histFile$[ebp]
	push	edx
	push	OFFSET $SG80138
	call	_addHistory
	add	esp, 8
$LN1@winStartPr:
; Line 407
	xor	eax, eax
$LN14@winStartPr:
; Line 408
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@winStartPr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 136				; 00000088H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN19@winStartPr:
	DD	2
	DD	$LN18@winStartPr
$LN18@winStartPr:
	DD	-36					; ffffffdcH
	DD	16					; 00000010H
	DD	$LN16@winStartPr
	DD	-112					; ffffff90H
	DD	68					; 00000044H
	DD	$LN17@winStartPr
$LN17@winStartPr:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN16@winStartPr:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
_winStartProcess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv64 = -4						; size = 4
_procId$ = 8						; size = 4
_sig$ = 12						; size = 4
_signalProcess PROC
; File c:\work\product specialist\eclipse-ws\processmanager\src\pmserver\pmnative.c
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 202
	mov	eax, DWORD PTR _sig$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN4@signalProc
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN3@signalProc
	cmp	DWORD PTR tv64[ebp], 3
	je	SHORT $LN2@signalProc
	jmp	SHORT $LN7@signalProc
$LN4@signalProc:
; Line 204
	mov	ecx, DWORD PTR _procId$[ebp]
	push	ecx
	call	_KillProcess
	add	esp, 4
; Line 205
	jmp	SHORT $LN7@signalProc
$LN3@signalProc:
; Line 207
	push	0
	mov	edx, DWORD PTR _procId$[ebp]
	push	edx
	call	_PauseResumeThreadList
	add	esp, 8
; Line 208
	jmp	SHORT $LN7@signalProc
$LN2@signalProc:
; Line 210
	push	1
	mov	eax, DWORD PTR _procId$[ebp]
	push	eax
	call	_PauseResumeThreadList
	add	esp, 8
$LN7@signalProc:
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_signalProcess ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
; Line 132
	push	ebp
	mov	ebp, esp
; Line 133
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__time64
	add	esp, 4
; Line 134
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_localtime PROC
; File c:\program files (x86)\microsoft visual studio 12.0\vc\include\time.inl
; Line 113
	push	ebp
	mov	ebp, esp
; Line 116
	mov	eax, DWORD PTR __Time$[ebp]
	push	eax
	call	__localtime64
	add	esp, 4
; Line 118
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_localtime ENDP
_TEXT	ENDS
END
